import streamlit as st
import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

st.set_page_config(page_title="App IngeFinanciera", layout="centered")
st.title("üìà App IngeFinanciera")

# Entrada de ticker
ticker = st.text_input("Ingresa el ticker burs√°til (por ejemplo, AAPL):").upper()

if ticker:
    try:
        stock = yf.Ticker(ticker)
        info = stock.info

        # Mostrar informaci√≥n b√°sica
        st.subheader("üìä Informaci√≥n de la empresa")
        st.markdown("""
        Esta secci√≥n presenta informaci√≥n general sobre la empresa asociada al ticker ingresado, como su nombre, sector econ√≥mico y una breve descripci√≥n de su actividad.
        """)
        st.write(f"**Nombre:** {info.get('shortName', 'N/A')}")
        st.write(f"**Sector:** {info.get('sector', 'N/A')}")
        st.write(f"**Descripci√≥n:** {info.get('longBusinessSummary', 'No disponible')}")

        # Descargar precios hist√≥ricos (√∫ltimos 5 a√±os)
        df = stock.history(period="5y")

        if df.empty:
            st.error("No se encontraron datos hist√≥ricos para este ticker.")
        else:
            # Mostrar gr√°fica de precios
            st.subheader("üìà Precio de cierre ajustado (√∫ltimos 5 a√±os)")
            st.markdown("""
            A continuaci√≥n se muestra una gr√°fica con la evoluci√≥n del precio de cierre ajustado de la acci√≥n durante los √∫ltimos cinco a√±os.
            Esto permite analizar tendencias generales del comportamiento del activo.
            """)
            fig, ax = plt.subplots()
            ax.plot(df.index, df["Close"], label="Precio de cierre")
            ax.set_xlabel("Fecha")
            ax.set_ylabel("Precio ($)")
            ax.set_title(f"{ticker} - Precio hist√≥rico")
            ax.legend()
            st.pyplot(fig)

            # Calcular rendimientos anuales acumulados
            st.subheader("üìà Rendimientos hist√≥ricos")
            st.markdown("""
            Esta tabla muestra los rendimientos totales anualizados acumulados para periodos de 1, 3 y 5 a√±os.
            Es √∫til para evaluar el desempe√±o hist√≥rico del activo.
            """)
            df["Daily Return"] = df["Close"].pct_change()
            rendimientos = {}
            for years in [1, 3, 5]:
                dias = 252 * years
                if len(df) >= dias:
                    rendimiento = ((df["Close"].iloc[-1] / df["Close"].iloc[-dias]) ** (1/years)) - 1
                    rendimientos[f"{years} a√±os"] = rendimiento

            st.dataframe(pd.DataFrame.from_dict(rendimientos, orient='index', columns=['Rendimiento anualizado']))
            st.markdown("_F√≥rmula usada: ((Precio final / Precio inicial)^(1/a√±os)) - 1_")

            # Calcular riesgo (volatilidad)
            st.subheader("üìâ Riesgo hist√≥rico (volatilidad anualizada)")
            st.markdown("""
            Esta medida representa la volatilidad hist√≥rica del activo, calculada como la desviaci√≥n est√°ndar de los rendimientos diarios anualizada (x ‚àö252).
            Cuanto mayor sea este valor, mayor es el riesgo asociado al activo.
            """)
            std_daily = df["Daily Return"].std()
            vol_anual = std_daily * np.sqrt(252)
            st.write(f"**Volatilidad anualizada:** {vol_anual:.2%}")
            st.markdown("_Calculada como desviaci√≥n est√°ndar diaria x ‚àö252_")

    except Exception as e:
        st.error(f"Ocurri√≥ un error: {e}")
